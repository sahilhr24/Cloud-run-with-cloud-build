# Define substitutions
substitutions:
  _DEPLOYMENT_NAME: 'py-service'
  _IMAGE: 'asia-south1-docker.pkg.dev/pvt-stage/stage-repo/stage-project-image:v-1.0'
  _REGION: 'asia-south1'

# Specify the logs bucket to store build logs
logsBucket: gs://cloud-build-logs-00

steps:
  # Step 1: Debug - List files in the current build context
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Listing files in the current build context:"
        ls -la
        echo "Deployment Name: ${_DEPLOYMENT_NAME}"
        echo "Image Name: ${_IMAGE}"

  # Step 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${_IMAGE}', '.']

  # Step 3: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_IMAGE}']

  # Step 4: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy to Cloud Run
    args:
      - 'gcloud'
      - 'run'
      - 'deploy'
      - '${_DEPLOYMENT_NAME}'
      - '--image'
      - '${_IMAGE}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port=3000'  # Match Dockerfile exposed port
      - '--cpu=2'
      - '--memory=2Gi'  # 2GB is usually enough
      - '--max-instances=10'
    timeout: 600s  # 10 minutes timeout

  # Step 5: Allow public access
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'add-iam-policy-binding'
      - '${_DEPLOYMENT_NAME}'
      - '--region'
      - '${_REGION}'
      - '--member'
      - 'allUsers'
      - '--role'
      - 'roles/run.invoker'

# Specify images to build
images:
  - '${_IMAGE}'

# Optional: Worker Pool for private builds (uncomment if needed)
# options:
#   pool:
#     name: 'projects/stage-443707/locations/asia-south1/workerPools/cloud-build-private-pool'
